diff --git a/include/ipmitool/helper.h b/include/ipmitool/helper.h
index b7ad628..3265f81 100644
--- a/include/ipmitool/helper.h
+++ b/include/ipmitool/helper.h
@@ -104,6 +104,8 @@ FILE * ipmi_open_file(const char * file, int rw);
 void ipmi_start_daemon(struct ipmi_intf *intf);
 uint16_t ipmi_get_oem_id(struct ipmi_intf *intf);
 
+uint8_t* hex2byte(const char* hexstring, int *retcode);
+
 #define ipmi_open_file_read(file)	ipmi_open_file(file, 0)
 #define ipmi_open_file_write(file)	ipmi_open_file(file, 1)
 
diff --git a/lib/helper.c b/lib/helper.c
index b9316c4..66fc838 100644
--- a/lib/helper.c
+++ b/lib/helper.c
@@ -856,3 +856,93 @@ ipmi_get_oem_id(struct ipmi_intf *intf)
 
 	return oem_id;
 }
+
+//Used to prefix a zero character at the begining for odd len strings.
+char* PrefixZero(char* inpstr, int *rc)
+{
+	if(inpstr == NULL) {
+		printf("Given inpstr is null");
+		*rc = -1;
+	}
+
+	int len = strlen(inpstr);
+	if (len == 0) {
+		*rc = -1;
+		printf("Given string is of len 0");
+		return NULL;
+	}
+
+	char* newstr = malloc(len + 1);
+	newstr[0] = '0'; //add the first char as '0'
+	int i = 0;
+
+	for (i = 0; i < len; i++) {
+		newstr[i + 1] = inpstr[i];
+	}
+
+	newstr[i + 1] = '\0';
+	*rc = 0;
+
+	return newstr;
+}
+
+char* converthex2byte(const char *hexstring, int len, int* rc)
+{
+	char *pos = hexstring;
+	char *val = malloc(len / 2 + 1);
+	char *start = val;
+	size_t count = 0;
+
+	if (!val) {
+		printf("Failed to allocate memory for the string \n");
+		*rc = -1;
+		return NULL;
+	}
+
+	/* WARNING: no sanitization or error-checking whatsoever */
+	for (; count < len / 2; count++) {
+		sscanf(pos, "%2hhX", &val[count]);
+		pos += 2;
+	}
+
+	val[count] = '\0';
+	*rc = 0;
+
+	return start;
+}
+
+uint8_t* hex2byte(const char* hexstring, int *retcode)
+{
+	if (hexstring == NULL) {
+		printf("Given string is null");
+		*retcode = -1;
+		return NULL;
+	}
+
+	int len = strlen(hexstring);
+	if (len == 0) {
+		printf("input str is zero len");
+		*retcode = -1;
+		return NULL;
+	}
+
+	//Odd length input str
+	if (len % 2 != 0) {
+		len = len + 1; // account for the prefixed 0.
+		int rc = 0;
+
+		char* newarr = PrefixZero(hexstring, &rc);
+
+		if (rc != 0) {
+			printf("Failed in the method: PrefixZero");
+			*retcode = rc;
+			return NULL;
+		}
+
+		return converthex2byte(newarr, len, retcode);
+	}
+	else //even length input str
+	{
+		return converthex2byte(hexstring, len, retcode);
+	}
+}
\ No newline at end of file
diff --git a/src/ipmitool.c b/src/ipmitool.c
index 164fd44..ebff17e 100644
--- a/src/ipmitool.c
+++ b/src/ipmitool.c
@@ -37,6 +37,7 @@
 #include <ipmitool/ipmi_intf.h>
 #include <ipmitool/ipmi_main.h>
 
+#include <ipmitool/ipmi_ocsoem.h>
 #include <ipmitool/ipmi_sdr.h>
 #include <ipmitool/ipmi_gendev.h>
 #include <ipmitool/ipmi_sel.h>
@@ -88,6 +89,7 @@ struct ipmi_cmd ipmitool_cmd_list[] = {
 	{ ipmi_rawspd_main,  "spd",     "Print SPD info from remote I2C device" },
 	{ ipmi_lanp_main,    "lan",     "Configure LAN Channels" },
 	{ ipmi_chassis_main, "chassis", "Get chassis status and set power state" },
+	{ ipmi_msftoem_main, "ocsoem", "OEM commands for Open Cloud Server"},
 	{ ipmi_power_main,   "power",   "Shortcut to chassis power commands" },
 	{ ipmi_event_main,   "event",   "Send pre-defined events to MC" },
 	{ ipmi_mc_main,      "mc",      "Management Controller status and global enables" },

 